<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SolutionGen.Generator.Model" #>
<#@ import namespace="Path = System.IO.Path" #>
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="<#= Solution.ToolsVersion #>" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"
            Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"/>
    <PropertyGroup>
        <Configuration Condition=" '$(Configuration)' == '' "><#= DefaultConfiguration #></Configuration>
        <Platform Condition=" '$(Platform)' == '' "><#= DefaultPlatform #></Platform>
        <ProjectGuid>{<#= ProjectGuid #>}</ProjectGuid>
        <OutputType>Library</OutputType>
        <AppDesignerFolder>Properties</AppDesignerFolder>
        <RootNamespace><#= RootNamespace #></RootNamespace>
        <AssemblyName><#= ProjectName #></AssemblyName>
        <TargetFrameworkVersion><#= TargetFrameworkVersion #></TargetFrameworkVersion>
        <LangVersion><#= LanguageVersion #></LangVersion>
        <FileAlignment>512</FileAlignment>
    </PropertyGroup>
<# foreach (Configuration configuration in ActiveConfigurations)
{
    CurrentConfiguration = configuration;
    foreach (string platform in TargetPlatforms)
    {#>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == '<#= configuration.Name #>|<#= platform #>' ">
        <PlatformTarget><#= GetStringProperty(Settings.PROP_CONFIGURATION_PLATFORM_TARGET) #></PlatformTarget>
        <DebugSymbols><#= GetStringProperty(Settings.PROP_DEBUG_SYMBOLS) #></DebugSymbols>
        <DebugType><#= GetStringProperty(Settings.PROP_DEBUG_TYPE) #></DebugType>
        <Optimize><#= GetStringProperty(Settings.PROP_OPTIMIZE) #></Optimize>
        <OutputPath>bin\<#= configuration.Name #>\</OutputPath>
        <DefineConstants><#= GetDefineConstants() #></DefineConstants>
        <ErrorReport><#= GetStringProperty(Settings.PROP_ERROR_REPORT) #></ErrorReport>
        <WarningLevel><#= GetStringProperty(Settings.PROP_WARNING_LEVEL) #></WarningLevel>
    </PropertyGroup>
<#  }
}#>
    <ItemGroup>
        <Reference Include="System"/>
        <Reference Include="System.Core"/>
        <Reference Include="System.Data"/>
        <Reference Include="System.Xml"/>
    </ItemGroup>
    <ItemGroup>
        <!-- Common to all configurations -->
<# foreach ((string, string) file in GetCommonIncludes())
{
    string filePath = file.Item1;
    string linkPath = file.Item2;
    bool hasLink = filePath != linkPath;
    // Links are not used because they make it impossible to add files at the correct location.
#>
        <<#= Path.GetExtension(filePath) == ".cs" ? "Compile" : "Content" #> Include="<#= filePath #>"/>
<#}
foreach (string projectName in GetCommonProjectRefs())
{#>
        <ProjectReference Include="<#= GetRelativeProjectRefPath(projectName) #>" >
            <Project>{<#=ProjectIdLookup[projectName].Guid #>}</Project>
            <Name><#= projectName #></Name>
        </ProjectReference>
<#}#>
<# foreach (string lib in GetCommonLibRefs())
{#>
        <Reference Include="<#= Path.GetFileNameWithoutExtension(lib) #>" >
            <HintPath><#= GetRelativeLibRefPath(lib) #></HintPath>
        </Reference>
<#}#>
    </ItemGroup>

<# foreach (Configuration configuration in ActiveConfigurations)
{
    CurrentConfiguration = configuration;#>
    <ItemGroup Condition=" '$(Configuration)' == '<#= configuration.Name #>' ">
<#  foreach((string, string) file in GetConfigurationSpecificIncludes())
    {
        string filePath = file.Item1;
        string linkPath = file.Item2;
        bool hasLink = filePath != linkPath;
        // Links are not used because they make it impossible to add files at the correct location.
#>
        <<#= Path.GetExtension(filePath) == ".cs" ? "Compile" : "Content" #> Include="<#= filePath #>"/>
<#  }

    foreach(string projectName in GetConfigurationSpecificProjectRefs())
    {#>
        <ProjectReference Include="<#= GetRelativeProjectRefPath(projectName) #>" >
            <Project>{<#=ProjectIdLookup[projectName].Guid #>}</Project>
            <Name><#= projectName #></Name>
        </ProjectReference>
<#  }

    foreach (string lib in GetConfigurationSpecificLibRefs())
    {#>
        <Reference Include="<#= Path.GetFileNameWithoutExtension(lib) #>" >
            <HintPath><#= GetRelativeLibRefPath(lib) #></HintPath>
        </Reference>
<#  }#>
    </ItemGroup>
<#}#>

    <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets"/>

    <!-- property: <#= Settings.PROP_INCLUDE_BUILD_TASKS #> -->
<# foreach (string file in Solution.GetBuildTasksFilesForProject(Project))
{#>
    <Import Project="<#= file #>" />
<#}#>

    <!-- property: <#= Settings.PROP_CUSTOM_CSPROJ_CONTENTS #> -->
<#= FormatCustomContents(GetCommonCustomContents(), 4) #>
<# ValidateNoConfigurationSpecificCustomContents(); #>
</Project>
