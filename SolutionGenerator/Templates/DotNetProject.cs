//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolutionGen.Templates {
    using System.Linq;
    using System.Text;
    using System.IO;
    using System.Collections.Generic;
    using SolutionGen.Generator.Model;
    using Path = System.IO.Path;
    using System;
    
    
    public partial class DotNetProject : DotNetProjectBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 9 "./Templates/DotNetProject.tt"
            this.Write(@"<?xml version=""1.0"" encoding=""utf-8""?>
<Project ToolsVersion=""12.0"" DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
    <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props""
            Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')""/>
    <PropertyGroup>
        <Configuration Condition="" '$(Configuration)' == '' "">");
            
            #line default
            #line hidden
            
            #line 14 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( DefaultConfiguration ));
            
            #line default
            #line hidden
            
            #line 14 "./Templates/DotNetProject.tt"
            this.Write("</Configuration>\n        <Platform Condition=\" \'$(Platform)\' == \'\' \">");
            
            #line default
            #line hidden
            
            #line 15 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( DefaultPlatform ));
            
            #line default
            #line hidden
            
            #line 15 "./Templates/DotNetProject.tt"
            this.Write("</Platform>\n        <ProjectGuid>{");
            
            #line default
            #line hidden
            
            #line 16 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ProjectGuid ));
            
            #line default
            #line hidden
            
            #line 16 "./Templates/DotNetProject.tt"
            this.Write("}</ProjectGuid>\n        <OutputType>Library</OutputType>\n        <AppDesignerFold" +
                    "er>Properties</AppDesignerFolder>\n        <RootNamespace>");
            
            #line default
            #line hidden
            
            #line 19 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( RootNamespace ));
            
            #line default
            #line hidden
            
            #line 19 "./Templates/DotNetProject.tt"
            this.Write("</RootNamespace>\n        <AssemblyName>");
            
            #line default
            #line hidden
            
            #line 20 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Project.Name ));
            
            #line default
            #line hidden
            
            #line 20 "./Templates/DotNetProject.tt"
            this.Write("</AssemblyName>\n        <TargetFrameworkVersion>");
            
            #line default
            #line hidden
            
            #line 21 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TargetFrameworkVersion ));
            
            #line default
            #line hidden
            
            #line 21 "./Templates/DotNetProject.tt"
            this.Write("</TargetFrameworkVersion>\n        <LangVersion>");
            
            #line default
            #line hidden
            
            #line 22 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LanguageVersion ));
            
            #line default
            #line hidden
            
            #line 22 "./Templates/DotNetProject.tt"
            this.Write("</LangVersion>\n        <FileAlignment>512</FileAlignment>\n    </PropertyGroup>\n");
            
            #line default
            #line hidden
            
            #line 25 "./Templates/DotNetProject.tt"
 foreach (Configuration configuration in ActiveConfigurations)
{
    CurrentConfiguration = configuration;
    foreach (string platform in TargetPlatforms)
    {
            
            #line default
            #line hidden
            
            #line 30 "./Templates/DotNetProject.tt"
            this.Write("    <PropertyGroup Condition=\" \'$(Configuration)|$(Platform)\' == \'");
            
            #line default
            #line hidden
            
            #line 30 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( configuration.Name ));
            
            #line default
            #line hidden
            
            #line 30 "./Templates/DotNetProject.tt"
            this.Write("|");
            
            #line default
            #line hidden
            
            #line 30 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( platform ));
            
            #line default
            #line hidden
            
            #line 30 "./Templates/DotNetProject.tt"
            this.Write("\' \">\n        <PlatformTarget>");
            
            #line default
            #line hidden
            
            #line 31 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetStringProperty(Settings.PROP_CONFIGURATION_PLATFORM_TARGET) ));
            
            #line default
            #line hidden
            
            #line 31 "./Templates/DotNetProject.tt"
            this.Write("</PlatformTarget>\n        <DebugSymbols>");
            
            #line default
            #line hidden
            
            #line 32 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetStringProperty(Settings.PROP_DEBUG_SYMBOLS) ));
            
            #line default
            #line hidden
            
            #line 32 "./Templates/DotNetProject.tt"
            this.Write("</DebugSymbols>\n        <DebugType>");
            
            #line default
            #line hidden
            
            #line 33 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetStringProperty(Settings.PROP_DEBUG_TYPE) ));
            
            #line default
            #line hidden
            
            #line 33 "./Templates/DotNetProject.tt"
            this.Write("</DebugType>\n        <Optimize>");
            
            #line default
            #line hidden
            
            #line 34 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetStringProperty(Settings.PROP_OPTIMIZE) ));
            
            #line default
            #line hidden
            
            #line 34 "./Templates/DotNetProject.tt"
            this.Write("</Optimize>\n        <OutputPath>bin\\");
            
            #line default
            #line hidden
            
            #line 35 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( configuration.Name ));
            
            #line default
            #line hidden
            
            #line 35 "./Templates/DotNetProject.tt"
            this.Write("\\</OutputPath>\n        <DefineConstants>");
            
            #line default
            #line hidden
            
            #line 36 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetDefineConstants() ));
            
            #line default
            #line hidden
            
            #line 36 "./Templates/DotNetProject.tt"
            this.Write("</DefineConstants>\n        <ErrorReport>");
            
            #line default
            #line hidden
            
            #line 37 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetStringProperty(Settings.PROP_ERROR_REPORT) ));
            
            #line default
            #line hidden
            
            #line 37 "./Templates/DotNetProject.tt"
            this.Write("</ErrorReport>\n        <WarningLevel>");
            
            #line default
            #line hidden
            
            #line 38 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetStringProperty(Settings.PROP_WARNING_LEVEL) ));
            
            #line default
            #line hidden
            
            #line 38 "./Templates/DotNetProject.tt"
            this.Write("</WarningLevel>\n    </PropertyGroup>\n");
            
            #line default
            #line hidden
            
            #line 40 "./Templates/DotNetProject.tt"
  }
}
            
            #line default
            #line hidden
            
            #line 42 "./Templates/DotNetProject.tt"
            this.Write(@"    <ItemGroup>
        <Reference Include=""System""/>
        <Reference Include=""System.Core""/>
        <Reference Include=""System.Data""/>
        <Reference Include=""System.Xml""/>
    </ItemGroup>
    <ItemGroup>
        <!-- Common to all configurations -->
");
            
            #line default
            #line hidden
            
            #line 50 "./Templates/DotNetProject.tt"
 foreach (string file in GetCommonIncludes())
{
            
            #line default
            #line hidden
            
            #line 52 "./Templates/DotNetProject.tt"
            this.Write("        <");
            
            #line default
            #line hidden
            
            #line 52 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.GetExtension(file) == ".cs" ? "Compile" : "Content" ));
            
            #line default
            #line hidden
            
            #line 52 "./Templates/DotNetProject.tt"
            this.Write(" Include=\"");
            
            #line default
            #line hidden
            
            #line 52 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 52 "./Templates/DotNetProject.tt"
            this.Write("\" />\n");
            
            #line default
            #line hidden
            
            #line 53 "./Templates/DotNetProject.tt"
}
foreach (string projectName in GetCommonProjectRefs())
{
            
            #line default
            #line hidden
            
            #line 56 "./Templates/DotNetProject.tt"
            this.Write("        <ProjectReference Include=\"");
            
            #line default
            #line hidden
            
            #line 56 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetRelativeProjectRefPath(projectName) ));
            
            #line default
            #line hidden
            
            #line 56 "./Templates/DotNetProject.tt"
            this.Write("\" >\n            <Project>{");
            
            #line default
            #line hidden
            
            #line 57 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectIdLookup[projectName].Guid ));
            
            #line default
            #line hidden
            
            #line 57 "./Templates/DotNetProject.tt"
            this.Write("}</Project>\n            <Name>");
            
            #line default
            #line hidden
            
            #line 58 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( projectName ));
            
            #line default
            #line hidden
            
            #line 58 "./Templates/DotNetProject.tt"
            this.Write("</Name>\n        </ProjectReference>\n");
            
            #line default
            #line hidden
            
            #line 60 "./Templates/DotNetProject.tt"
}
            
            #line default
            #line hidden
            
            #line 61 "./Templates/DotNetProject.tt"
 foreach (string lib in GetCommonLibRefs())
{
            
            #line default
            #line hidden
            
            #line 63 "./Templates/DotNetProject.tt"
            this.Write("        <Reference Include=\"");
            
            #line default
            #line hidden
            
            #line 63 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.GetFileNameWithoutExtension(lib) ));
            
            #line default
            #line hidden
            
            #line 63 "./Templates/DotNetProject.tt"
            this.Write("\" >\n            <HintPath>");
            
            #line default
            #line hidden
            
            #line 64 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetRelativeLibRefPath(lib) ));
            
            #line default
            #line hidden
            
            #line 64 "./Templates/DotNetProject.tt"
            this.Write("</HintPath>\n        </Reference>\n");
            
            #line default
            #line hidden
            
            #line 66 "./Templates/DotNetProject.tt"
}
            
            #line default
            #line hidden
            
            #line 67 "./Templates/DotNetProject.tt"
            this.Write("    </ItemGroup>\n\n");
            
            #line default
            #line hidden
            
            #line 69 "./Templates/DotNetProject.tt"
 foreach (Configuration configuration in ActiveConfigurations)
{
    CurrentConfiguration = configuration;
            
            #line default
            #line hidden
            
            #line 72 "./Templates/DotNetProject.tt"
            this.Write("    <ItemGroup Condition=\" \'$(Configuration)\' == \'");
            
            #line default
            #line hidden
            
            #line 72 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( configuration.Name ));
            
            #line default
            #line hidden
            
            #line 72 "./Templates/DotNetProject.tt"
            this.Write("\' \">\n");
            
            #line default
            #line hidden
            
            #line 73 "./Templates/DotNetProject.tt"
  foreach(string file in GetConfigurationSpecificIncludes())
    {
            
            #line default
            #line hidden
            
            #line 75 "./Templates/DotNetProject.tt"
            this.Write("        <");
            
            #line default
            #line hidden
            
            #line 75 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.GetExtension(file) == ".cs" ? "Compile" : "Content" ));
            
            #line default
            #line hidden
            
            #line 75 "./Templates/DotNetProject.tt"
            this.Write(" Include=\"");
            
            #line default
            #line hidden
            
            #line 75 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 75 "./Templates/DotNetProject.tt"
            this.Write("\" />\n");
            
            #line default
            #line hidden
            
            #line 76 "./Templates/DotNetProject.tt"
  }

    foreach(string projectName in GetConfigurationSpecificProjectRefs())
    {
            
            #line default
            #line hidden
            
            #line 80 "./Templates/DotNetProject.tt"
            this.Write("        <ProjectReference Include=\"");
            
            #line default
            #line hidden
            
            #line 80 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetRelativeProjectRefPath(projectName) ));
            
            #line default
            #line hidden
            
            #line 80 "./Templates/DotNetProject.tt"
            this.Write("\" >\n            <Project>{");
            
            #line default
            #line hidden
            
            #line 81 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectIdLookup[projectName].Guid ));
            
            #line default
            #line hidden
            
            #line 81 "./Templates/DotNetProject.tt"
            this.Write("}</Project>\n            <Name>");
            
            #line default
            #line hidden
            
            #line 82 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( projectName ));
            
            #line default
            #line hidden
            
            #line 82 "./Templates/DotNetProject.tt"
            this.Write("</Name>\n        </ProjectReference>\n");
            
            #line default
            #line hidden
            
            #line 84 "./Templates/DotNetProject.tt"
  }

    foreach (string lib in GetConfigurationSpecificLibRefs())
    {
            
            #line default
            #line hidden
            
            #line 88 "./Templates/DotNetProject.tt"
            this.Write("        <Reference Include=\"");
            
            #line default
            #line hidden
            
            #line 88 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Path.GetFileNameWithoutExtension(lib) ));
            
            #line default
            #line hidden
            
            #line 88 "./Templates/DotNetProject.tt"
            this.Write("\" >\n            <HintPath>");
            
            #line default
            #line hidden
            
            #line 89 "./Templates/DotNetProject.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( GetRelativeLibRefPath(lib) ));
            
            #line default
            #line hidden
            
            #line 89 "./Templates/DotNetProject.tt"
            this.Write("</HintPath>\n        </Reference>\n");
            
            #line default
            #line hidden
            
            #line 91 "./Templates/DotNetProject.tt"
  }
            
            #line default
            #line hidden
            
            #line 92 "./Templates/DotNetProject.tt"
            this.Write("    </ItemGroup>\n");
            
            #line default
            #line hidden
            
            #line 93 "./Templates/DotNetProject.tt"
}
            
            #line default
            #line hidden
            
            #line 94 "./Templates/DotNetProject.tt"
            this.Write(@"    <Import Project=""$(MSBuildToolsPath)\Microsoft.CSharp.targets""/>
    <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
         Other similar extension points exist, see Microsoft.Common.targets.
    <Target Name=""BeforeBuild"">
    </Target>
    <Target Name=""AfterBuild"">
    </Target>
    -->

</Project>
");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class DotNetProjectBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
